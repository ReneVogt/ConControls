/*
 * (C) René Vogt
 *
 * Published under MIT license as described in the LICENSE.md file.
 *
 */

using ConControls.ConsoleApi;
using ConControls.WindowsApi.Types;

namespace ConControls.Controls
{
    /// <summary>
    /// Arguments for the <see cref="IConsoleWindow.KeyEvent">IConsoleWindow.KeyEvent</see>.
    /// </summary>
    public sealed class KeyEventArgs : ConsoleWindowEventArgs
    {
        /// <summary>
        /// The unicode character representing the key.
        /// </summary>
        public char UnicodeChar { get; }
        /// <summary>
        /// The repeat count, which indicates that a key is being held down.
        /// </summary>
        /// <remarks>
        /// This property represents the repeat count, which indicates that a key is being held down.
        /// For example, when a key is held down, you might get five events with this member equal to 1, one event with this member equal to 5, or multiple events with this member greater than or equal to 1.
        /// </remarks>
        public int RepeatCount { get; }
        /// <summary>
        /// A <see cref="VirtualKey">virtual-key code</see> that identifies the given key
        /// in a device-independent manner.
        /// </summary>
        public VirtualKey VirtualKey { get; }
        /// <summary>
        /// The virtual scan code of the given key that represents the device-dependent
        /// value generated by the keyboard hardware.
        /// </summary>
        public int VirtualScanCode { get; }
        /// <summary>
        /// If the key is pressed, this member is <c>true</c>.
        /// Otherwise, this member is <c>false</c> (the key is released).
        /// </summary>
        public bool KeyDown { get; }
        /// <summary>
        /// The state of the control keys. This can be a combination
        /// of <see cref="ControlKeyStates"/> values.
        /// </summary>
        public ControlKeyStates ControlKeys { get; }

        internal KeyEventArgs(ConsoleKeyEventArgs e)
        {
            UnicodeChar = e.UnicodeChar;
            RepeatCount = e.RepeatCount;
            VirtualKey = e.VirtualKeyCode;
            VirtualScanCode = e.VirtualScanCode;
            KeyDown = e.KeyDown;
            ControlKeys = e.ControlKeys;

        }
    }
}
